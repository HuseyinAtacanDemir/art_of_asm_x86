; X86.ASM
;
; This is a special version of SHELL.ASM that includes macros for the x86 GET and PUT
; instructions.  It allows you to write x86 style programs for the 80x86.
;
; There are a few caveats.  
;
; First, you cannot use the HALT, BRK, or IRET instructions.
; BRK does not exist, HALT and IRET do not work the same way as they do on the x86
; hypothetical processors.
;
; Second, the memory-mapped I/O devices are not present (no switches, no LEDs).
;
; Third, use operands of the form "DS:[xxxx]" for the direct addressing mode.
; Without the "DS:" prefix, the instruction will not work the same way as the
; x86 instruction.
;
; Fourth, unlike the x86, this program uses separate segments for the code and
; data.  You cannot do self-modifying code like you did on the x86 assignments.
;
; Fifth, MASM lets you use labels that are just like the x86 labels with one exception:
; "C" is a reserved word in MASM so you cannot create a program label named "C".  MASM
; returns some bizarre error if you do.
;
; Sixth, you can use the x86 registers and addressing modes as well as the 80x86
; registers and addressing modes (8086 only). 


		include 	stdlib.a
		includelib	stdlib.lib

sseg		segment	para stack 'stack'
stk		byte	128 dup ("stack   ")
sseg		ends

dseg		segment para public 'data'
DataMemory	byte	65520 dup (?)
dseg		ends


cseg		segment	para public 'code'
		assume	cs:cseg, ds:cseg


; The following assembly language procedure simulates the x86 GET instruction.

get		textequ	<call Gethex>
GetHex		proc	near
		push	es
		push	bx
		push	di

GHLoop:		print
		byte	"Enter a hexadecimal number:",0
		getsm
		mov	bx, di
TestHex:	mov	al, es:[bx]
		inc	bx
		cmp	al, 0
		je	GoodHex
		IsXDigit
		je	TestHex
		print
		byte	"Illegal hexadecimal value, re-enter",cr,lf,0
		jmp	GHLoop

GoodHex:	AtoH
		free
		pop	di
		pop	bx
		pop	es
		ret
GetHex		endp

	

; The following assembly language procedure simulates the x86 PUT instruction.

put		textequ	<call PutHex>
PutHex		proc	near
		putw
		putcr
		ret
PutHex		endp



; This is where the main program goes.

Main		proc
		mov	ax, dseg
		mov	ds, ax
		mov	es, ax
		meminit


;*****************************************************************************************
;
; EX4_2: Perform all the tasks described in the comments that follow.
;
;*****************************************************************************************


; Remove this comment and replace it with an instruction that reads a hexadecimal
; value from the user, leaving that value in the AX register.
    get

; Replace this comment with an x86 instruction that copies the value in the AX register
; to the BX register.
    mov bx, ax

; Remove this comment and replace it with an instruction that reads a hexadecimal
; value from the user, leaving that value in the AX register.
    get

; Remove this comment and replace it with an instruction that adds the values in the
; AX and BX registers together, leaving their sum in AX.
    add ax, bx

; Replace this comment with a line, that begins with the "a:" label, that prints the
; value in the ax register
a:  put

; Replace this comment with a line that subtracts one from the value in the AX register.
    dec ax

; Replace this comment with a line that compares the value in the AX register to zero.
    cmp ax, 0

; Replace this comment with a line that jumps back to label "a" if AX was greater than
; zero.
    ja  a

; Replace this comment with a line that prints the value in the AX register.
    put

;*****************************************************************************************


		ExitPgm
Main		endp

cseg		ends


zzzzzzseg	segment	para public 'zzzzzz'
LastBytes	byte	16 dup (?)
zzzzzzseg	ends
		end	Main




; Print-out of the output of the program:
;
; Enter a hexadecimal number:4
; Enter a hexadecimal number:2
; 0006
; 0005
; 0004
; 0003
; 0002
; 0001
; 0000
; D:\>


; Program listing of the section that I wrote as seen on the CodeViewer debugger
------------------------------------------
addr     |encoded    |instr    |operands |
------------------------------------------
2146:008C E871FF			CALL  		0000
2146:008F 8BD8			  MOV   		BX, AX
2146:0091 E86CFF			CALL  		0000
2146:0094 03C3			  ADD   		AX, BX
2146:0096 E8DCFF			CALL  		0075
2146:0099 48			    DEC   		AX
2146:009A 83F800			CMP   		AX, 00
2146:009D 77F7			  JA    		0096
2146:009F E8D3FF			CALL  		0075

The addresses in the CV program listing are not linear as was in the simx86 program. Instead we have a segment and offset sections. Also, whenever we used an address in the x86 for calling a subroutine we would actually see that subroutine in the encoded part of a 3 byte instruction, here, we do not see the actual addr in the encoded version of the instr. I presume this is because the encoded version includes the actual addr (or the relevant offset from the start of the code segment), and the decoded version just includes the addr relative to the rest of the code.. but I am not sure. maybe the encoded version includes a physical address? I don't think that is the case though.

When compiled with the /Zi option, the CodeView source-code window gives a detailed view of the source code, includiong the comments, and one can jump through the code as seen in the .asm file. Even though the compilation provides a much larger file, the debugging experience feels similar to the modern IDE experience
