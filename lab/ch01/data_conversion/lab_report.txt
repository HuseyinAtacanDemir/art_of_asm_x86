1. Unsigned Decimal powers of 2 in hex, binary, and signed dec
  a. Going from 1 to 32768 by doubling the unsigned dec value shifts the 1 in binary to the left at each iteration
  b. In hex, the pattern of 1,2,4,8,10,20,40,80,100,...,8000 is achieved. One can think of this as a shift left that is done on a loop with 4 values that is 1,2,4,8 shift 10,20,40,80, shift, or more precisely shift when multiplied by 2^4
  c. In signed decimal, everything starts of equivalent to the unsigned decimal value, when we reach 32768 the signed value is -32768. since the H.O. bit is 1 with a trail of all zeroes.
unsigned  signed  hexadecimal binary
1         1       0001        0000 0000 0000 0001
2         2       0002        0000 0000 0000 0010
4         4       0004        0000 0000 0000 0100
8         8       0008        0000 0000 0000 1000
16        16      0010        0000 0000 0001 0000
32        32      0020        0000 0000 0010 0000
64        64      0040        0000 0000 0100 0000
128       128     0080        0000 0000 1000 0000
256       256     0100        0000 0001 0000 0000
512       512     0200        0000 0010 0000 0000
1024      1024    0400        0000 0100 0000 0000
2048      2048    0800        0000 1000 0000 0000
4096      4096    1000        0001 0000 0000 0000
8192      8192    2000        0010 0000 0000 0000
16384     16384   4000        0100 0000 0000 0000
32768     32768   8000        1000 0000 0000 0000

2. Binary Numbers with exactly two consecutive bits set
  a. Starting with 0011b shinfting the value left, unsurprisingly produces the values of the formula 3*2^n, where n is the number of times the shift is applied starting from 1 at the case of 0011b.
  b. The Hex values seem to be going thus 3, 6, c, 18, 30... where a left shift occurs every 4th shift among these values.
  c. The decimal values are 3, 6, 12, 24, 48, 96, 192, 384, 768, 1536, 3072, etc The decimals can also be calculated using the following formula: 2^(n+1)-2^n(-1), 
    c1: 3 = 2^2 - 2^0 = 4-1, 1536 = 2^8 - 2^6 = 2048 - 512
    c2: or the following formula: 2^(n-1) + 2^(n), 3 = 2^0 + 2^1

3. LO Byte, nibble, or two binary digits 0.
  a. If LO byte is zero, the LO two hex digits are zero
  b. If LO nibble is zero, the LO digit of hex is zero
  c. If LO two bits are zero, hex starts with 4 or C
  d. If LO two digits of hex are zero, the LO byte is sure to be zero
  e. If LO digit of hex is zero, the LO nibble is sure to be zero

4. Negative powers of 2
  a. Same as unsigned version of the binary except for the extra ones in front of the most significant binary digit of the number.
  b. One could get the unsigned digit by iterating from the HO digit of the binary until the next digit is zero, and copy all bits including the last 1 that was seen to get the positive version of the negative power of two.
  c. However, trying out more values, I have realized that a more simple algorithm that also works for all numbers couldbe to just assume the HO bit is positive, and subtract the unsigned value of each 1 encountered afterwards and then putting a negative sign in front of the result..

5. Odd and Even
  a. Odd numbers always have a 1 in the LO bit
  b. Even numbers always have a 0 in the LO bit

6. Multiples of 3  
  a. 11 110 1001 1100 1111 1.0010 1.0101 1.1000 1.1011 1.1110 for multiples of three, the difference of the the count of even digit 1's and odd digit 1's are always a multiple of three. 
  b. The LO bit(zeroeth) is always alternating
  c. The bit number 1 is alternating every second time, 1 1 - 0 0 - 1 1 - 0 0 - 1 1 - 0 0 etc
  d. The bit number 2 is alternating between 0 1 0 1 and 1 0 1 0 every fourth time
  e. The bit number 3 is alternating four patterns consecutively: 0011 1001 1100 0110
decimal hexadecimal binary
0       0000        0000 0000 0000 0 0 0 0
3       0003        0000 0000 0000 0 0 1 1
6       0006        0000 0000 0000 0 1 1 0
9       0009        0000 0000 0000 1 0 0 1
12      000C        0000 0000 0000 1 1 0 0
15      000F        0000 0000 0000 1 1 1 1
18      0012        0000 0000 0001 0 0 1 0
21      0015        0000 0000 0001 0 1 0 1
24      0018        0000 0000 0001 1 0 0 0
27      001B        0000 0000 0001 1 0 1 1
30      001E        0000 0000 0001 1 1 1 0
33      0021        0000 0000 0010 0 0 0 1
36      0024        0000 0000 0010 0 1 0 0
39      0027        0000 0000 0010 0 1 1 1
42      002A        0000 0000 0010 1 0 1 0
45      002D        0000 0000 0010 1 1 0 1
48      0030        0000 0000 0011 0 0 0 0
51      0033        0000 0000 0011 0 0 1 1
54      0036        0000 0000 0011 0 1 1 0
57      0039        0000 0000 0011 1 0 0 1
60      003C        0000 0000 0011 1 1 0 0
63      003F        0000 0000 0011 1 1 1 1
66      0042        0000 0000 0100 0 0 1 0
etc

7. Multiples of 4: 
  a. The pattern if it could be called one, is the same as the pattern for multiples of 2 but shifted left one digit

8. Multiples of 2:
  a. The pattern is same as just binary counting but one digit shifted left hahah

9. Multiples of 1 or just counting
  a. put a one, if there was already a one put 0 + carry make, carry 1 repeat for next digit
  b. pattern... lo bit 101010, fitst bit 011001100110011 etc, second bit 00011110000111100001111 etc

10. hex <==> bin conversions
  a. it is advisable to pad the binary number into discrete 4 digit chunks, because one feels the need to for example write an F when one sees a 1111 togeter... but that 1111 could be in the binary number 111100, so it is not really a 1111 is it, it is more like 0011 1100 so 3C not F00
  b. trying out the example in the book gives 15 * 2^n 

11. Multiples of 5
